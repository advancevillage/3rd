package sm4

import (
	"bytes"
	"encoding/hex"
	"testing"
)

var sm4Test = map[string]struct {
	src []byte
	key []byte
	dst []byte
}{
	"case1": {
		src: []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
		key: []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
		dst: []byte{0x68, 0x1e, 0xdf, 0x34, 0xd2, 0x06, 0x96, 0x5e, 0x86, 0xb3, 0xe9, 0x4f, 0x53, 0x6e, 0x42, 0x46},
	},
	"case2": {
		src: []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff},
		key: []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff},
		dst: []byte{0xB2, 0xB3, 0x9A, 0x1B, 0x91, 0xA4, 0xE2, 0x4F, 0xA8, 0x91, 0x55, 0xE8, 0x2C, 0xF4, 0x77, 0x6D},
	},
}

func Test_sm4(t *testing.T) {
	for n, p := range sm4Test {
		f := func(t *testing.T) {
			c, err := NewCipher(p.key)
			if err != nil {
				t.Fatal(err)
				return
			}
			act := make([]byte, len(p.src))
			c.Encrypt(act, p.src)

			if !bytes.Equal(act, p.dst) {
				t.Fatalf("%s encrypt wrong %s <> %s", n, hex.EncodeToString(act), hex.EncodeToString(p.dst))
			}

			c.Decrypt(act, p.dst)
			if !bytes.Equal(act, p.src) {
				t.Fatalf("%s decrypt wrong %s <> %s", n, hex.EncodeToString(act), hex.EncodeToString(p.src))
			}
		}

		t.Run(n, f)
	}
}

func Benchmark_sm4(b *testing.B) {
	src := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10}
	key := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10}
	dst := []byte{0x68, 0x1e, 0xdf, 0x34, 0xd2, 0x06, 0x96, 0x5e, 0x86, 0xb3, 0xe9, 0x4f, 0x53, 0x6e, 0x42, 0x46}

	c, err := NewCipher(key)
	if err != nil {
		b.Fatal(err)
		return
	}
	act := make([]byte, len(src))

	for i := 0; i < b.N; i++ {
		c.Encrypt(act, src)
		if !bytes.Equal(act, dst) {
			b.Fatal("encrypt wrong")
		}

		c.Decrypt(act, dst)
		if !bytes.Equal(act, src) {
			b.Fatal("decrypt wrong")
		}
	}
}
